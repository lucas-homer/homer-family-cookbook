datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  role      Role    @default(MEMBER)
  firstName String?
  lastName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  recipes         Recipe[]
  favoriteRecipes UsersFavoriteRecipes[]
  recipeReads     RecipeRead[]
  notes           Note[]

}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model RecipeRead {
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([recipeId, userId])
}

model UsersFavoriteRecipes {
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())

  @@id([recipeId, userId])
}

model Recipe {
  id           String  @id @default(cuid())
  title        String
  instructions String  @db.Text
  servings     String?

  userId    String
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingredients      Ingredient[]
  categories       Category[]
  favoritedUsers   UsersFavoriteRecipes[]
  recentlyViewedBy RecipeRead[]
  notes            Note[]

}

model Note {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  author    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipes Recipe[]
}

model Ingredient {
  id       String  @id @default(cuid())
  name     String //  TODO -- I don't like this :(
  quantity String? // TODO -- or this!

  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
